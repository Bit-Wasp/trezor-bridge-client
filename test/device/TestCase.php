<?php

declare(strict_types=1);

namespace BitWasp\Test\Trezor\Device;

abstract class TestCase extends \PHPUnit\Framework\TestCase
{
    /**
     * Set during test
     * @var int
     */
    private $emu;

    /**
     * Set during test
     * @var int
     */
    private $bridge;

    public function getTestBridgeVersion(): string
    {
        if (!($ver = getenv('TREZOR_BRIDGE_VERSION'))) {
            throw new \RuntimeException("Missing TREZOR_BRIDGE_VERSION");
        }
        return substr($ver, 1);
    }

    public function getRootPath(): string
    {
        return __DIR__ . "/../../";
    }

    public function getStateFile(): string
    {
        return "{$this->getRootPath()}/emulator.img";
    }

    public function getEmulatorPath(): string
    {
        $path = getenv("EMULATOR_PATH");
        if (!$path) {
            throw new \RuntimeException("EMULATOR_PATH not set");
        }
        return $path;
    }

    public function getEmulatorStartCommand(): string
    {
        return $this->getEmulatorPath() .
        " > 1 & echo $! ; ";
    }
    public function getBridgeStartCommand(): string
    {
        return $this->getBridgePath() .
            " -u=false -e 21324 -e 21325 -l /tmp/trezor-bridge > 1 & echo $! ; ";
    }
    public function getBridgePath(): string
    {
        $path = getenv("BRIDGE_PATH");
        if (!$path) {
            throw new \RuntimeException("BRIDGE_PATH not set");
        }
        return $path;
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $bridgeStart = $this->getBridgeStartCommand();
        $emuStart = $this->getEmulatorStartCommand();

        $pidEmu = exec($emuStart);
        usleep( (int) (0.2 * pow(10,6)));

        $pidBridge = exec($bridgeStart);
        usleep( (int) (0.2 * pow(10,6)));

        $this->emu = $pidEmu;
        $this->bridge = $pidBridge;
    }

    public function tearDown()
    {
        exec("kill -9 {$this->emu}");
        exec("kill -9 {$this->bridge}");
        unlink($this->getStateFile());
    }
}
